
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ATTRIBUTES BOOL CHAR CLASS COLON COMMA CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING DIF DIV DIV_EQ DO DOT ELSE EQUAL FLOAT FROM FUNCTION GREATER GREAT_TH ID IF INHERIT INT LESS LESS_TH L_BREAK L_CURPAR L_PAR MAIN METHODS MINUS MIN_EQ MULT MULT_EQ OR PLUS PLUS_EQ PROGRAM READ RETURN R_BREAK R_CURPAR R_PAR SAME SEMICOLON THEN TO VAR VARS VOID WHILE WRITE\n    program : PROGRAM ID np_addFunc SEMICOLON programT\n    \n    programT : class programT\n             | vars programF\n             | programF\n    \n    programF : func programF \n             | main empty\n    \n    class : CLASS ID classT\n    \n    classT : LESS INHERIT ID GREATER classF\n            | classF\n    \n    classF : SEMICOLON L_CURPAR ATTRIBUTES dec METHODS func R_CURPAR SEMICOLON empty\n    \n    vars  : VARS dec empty\n    \n    dec : VAR arr np_getDecArr decF  \n        | VAR np_getDec decF \n     \n    decF : COMMA dec \n          | COLON type np_getVarType SEMICOLON np_getDec dec \n          | COLON type np_getVarType SEMICOLON np_getDec np_addToDic empty\n    \n    type  : INT empty\n          | FLOAT empty\n          | CHAR empty\n          | BOOL empty\n          | ID empty\n    \n    arr : L_BREAK CTE_INT COMMA CTE_INT R_BREAK empty\n        | L_BREAK CTE_INT R_BREAK  empty \n    \n    func : typeFunc FUNCTION ID np_addFunc L_PAR funcF\n    \n    funcF : parameter R_PAR SEMICOLON dec L_CURPAR statement R_CURPAR empty\n           | R_PAR SEMICOLON dec L_CURPAR statement R_CURPAR empty\n    \n    typeFunc  : INT empty\n              | FLOAT empty\n              | CHAR empty\n              | BOOL empty\n              | ID empty\n              | VOID empty\n    \n    parameter : VAR COLON typepar SEMICOLON parameterF\n    \n    parameterF : parameter\n                 | empty\n    \n    typepar  : INT empty\n          | FLOAT empty\n          | CHAR empty\n          | BOOL empty\n          | ID empty\n    \n    main : MAIN np_getMainFunc L_PAR R_PAR L_CURPAR statement R_CURPAR empty\n    \n    statement : assigment statementF\n                | void statementF\n                | return statementF\n                | read statementF\n                | write statementF\n                | if statementF\n                | repeat statementF\n\n    statementF : statement\n                | empty\n    \n    void : ID  DOT ID L_PAR param R_PAR SEMICOLON empty\n            | ID L_PAR param R_PAR SEMICOLON empty\n            | ID L_PAR R_PAR SEMICOLON empty\n    \n    arrfunc : L_BREAK exp COMMA exp R_BREAK empty\n            | L_BREAK exp R_BREAK empty\n    \n    param : exp paramF\n\n    paramF : COMMA param\n            | empty\n    \n    return : RETURN L_PAR exp np_addReturn R_PAR SEMICOLON empty\n    \n    var : VAR varF  \n        | ID DOT VAR varF  \n    \n    varF : arrfunc empty\n          | empty\n    \n    read : READ L_PAR readF\n    \n    readF : var np_addRead COMMA readF \n          | var np_addRead R_PAR SEMICOLON empty\n    \n    write  : WRITE L_PAR writeT\n\n    writeT : CTE_STRING np_addConstString writeF\n            | exp writeF\n\n    writeF : COMMA np_addWrite  writeT\n               | R_PAR np_addWrite SEMICOLON empty\n    \n    repeat : conditional empty\n            | nonconditional empty\n    \n    if : IF L_PAR exp R_PAR THEN L_CURPAR statement SEMICOLON R_CURPAR ifF\n\n    ifF : ELSE L_CURPAR statement SEMICOLON R_CURPAR empty\n        | empty\n    \n    assigment : var np_addId assigmentF\n\n    assigmentF : EQUAL np_addOp exp np_doAssign empty \n                | ope np_addOp exp np_doAssign empty\n    \n    ope : PLUS_EQ empty\n        | MIN_EQ empty\n        | MULT_EQ empty\n        | DIV_EQ empty\n    \n    conditional : WHILE L_PAR exp R_PAR DO L_CURPAR statement SEMICOLON R_CURPAR empty\n    \n    nonconditional : FROM VAR arrfunc nonconditionalF\n                    | FROM VAR nonconditionalF\n\n    nonconditionalF : exp TO exp DO L_CURPAR statement SEMICOLON R_CURPAR empty\n    \n    bool : logical np_addBool boolF\n\n    boolF : OR np_addOp bool\n        | AND np_addOp bool\n        | empty\n    \n    logical : ex np_addLogical logicalF\n\n    logicalF : LESS np_addOp logical\n            | GREATER np_addOp logical\n            | LESS_TH np_addOp logical\n            | GREAT_TH np_addOp logical\n            | SAME np_addOp logical\n            | DIF np_addOp logical\n            | empty\n    \n    exp : bool empty\n\n    \n    ex  : term np_addEx exF\n\n    exF : PLUS np_addOp ex\n         | MINUS np_addOp ex\n         | empty\n    \n    term : factor np_addTerm termF\n\n    termF : MULT np_addOp term\n         | DIV np_addOp term\n         | empty\n    \n    factor  : L_PAR np_addPar exp R_PAR np_popPar empty\n            | factorT\n\n    factorT : PLUS factorF\n            | MINUS factorF\n            | factorF\n\n    factorF : varcte empty\n    \n    varcte  : var np_addId empty\n            | CTE_INT np_addConstInt empty\n            | CTE_FLOAT np_addConstFloat empty\n            | CTE_CHAR np_addConstChar empty\n            | CTE_BOOL np_addConstBool empty\n    \n    empty : \n    np_getMainFunc : np_addFunc : np_getDec : np_getDecArr : np_getVarType : np_addToDic : np_addId : np_addConstInt : np_addConstFloat : np_addConstChar : np_addConstBool : np_addConstString : np_addOp : np_addPar : np_popPar : np_addTerm : np_addEx : np_addLogical : np_addBool : np_doAssign : np_addRead : np_addWrite : np_addReturn : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,10,14,23,24,28,29,110,146,],[0,-1,-4,-120,-2,-3,-5,-6,-120,-41,]),'ID':([2,5,8,9,11,13,26,30,37,39,41,47,50,52,58,59,69,80,85,86,87,88,89,90,91,98,99,100,103,104,105,109,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,147,148,149,150,151,152,153,155,157,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,177,179,183,186,187,190,191,193,200,201,202,203,204,205,206,207,209,211,213,215,216,217,218,219,220,221,222,223,224,225,226,227,231,232,235,236,238,239,240,241,242,247,248,251,252,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,280,282,283,287,290,292,293,294,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,341,343,344,345,346,350,351,353,355,356,357,358,359,362,363,],[3,6,6,6,25,6,-120,45,-7,-9,-11,56,-13,65,-12,-14,93,-24,93,93,93,93,93,93,93,-120,-120,-120,-8,6,-123,145,154,156,156,156,156,156,-72,-73,-60,-120,-63,156,156,156,-126,-77,-133,-133,-120,-120,-120,-120,-120,-134,-120,-139,-138,-137,-136,-110,156,-113,156,-120,-127,-128,-129,-130,-131,-64,-67,-62,156,-86,-15,-120,93,156,156,-80,-81,-82,-83,156,-61,156,-120,156,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-142,156,-120,-85,156,-120,-16,93,-140,-140,-120,-53,-88,-133,-133,-91,-92,-133,-133,-133,-133,-133,-133,-99,-101,-133,-133,-104,-105,-133,-133,-108,-115,-116,-117,-118,-119,156,-68,156,-55,-10,-120,-120,-120,-135,-52,156,156,156,156,156,156,156,156,156,156,156,156,-120,-65,-120,-70,-120,93,-120,93,-120,-26,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,-54,93,-25,-51,-109,-120,-120,-74,-76,-84,-120,93,-87,-120,-75,]),'SEMICOLON':([3,4,25,60,61,62,63,64,65,70,72,73,74,75,76,77,82,85,86,87,88,89,90,91,98,99,100,107,111,112,113,114,115,116,117,118,119,127,128,129,130,131,140,141,142,143,144,145,147,155,159,161,162,163,164,165,166,168,170,171,172,173,174,175,177,179,183,187,189,195,196,197,198,199,207,210,211,215,216,217,218,219,220,221,222,223,224,225,226,227,231,233,236,238,247,248,251,252,254,257,258,265,266,269,270,273,274,275,276,277,278,279,281,282,284,287,293,294,295,296,297,310,311,312,313,314,316,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,345,346,349,350,351,353,355,356,357,359,360,362,363,],[-122,5,40,-125,-120,-120,-120,-120,-120,40,105,-17,-18,-19,-20,-21,108,-120,-120,-120,-120,-120,-120,-120,-120,-120,-120,138,-42,-49,-50,-43,-44,-45,-46,-47,-48,-72,-73,-60,-120,-63,194,-120,-120,-120,-120,-120,-77,-120,211,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-64,-67,-62,-86,240,-36,-37,-38,-39,-40,-61,251,-120,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-142,-120,-85,-140,-140,-120,-53,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,310,312,-68,314,-55,-120,-120,323,-135,-52,-120,-65,-120,-70,-120,-120,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,347,-54,348,-51,-109,352,-120,-120,-74,-76,-84,-120,-87,361,-120,-75,]),'CLASS':([5,8,37,39,103,240,290,],[11,11,-7,-9,-8,-120,-10,]),'VARS':([5,8,37,39,103,240,290,],[12,12,-7,-9,-8,-120,-10,]),'MAIN':([5,8,9,13,26,37,39,41,50,58,59,80,103,105,136,190,191,240,241,290,292,319,320,344,],[16,16,16,16,-120,-7,-9,-11,-13,-12,-14,-24,-8,-123,-126,-15,-120,-120,-16,-10,-120,-120,-26,-25,]),'INT':([5,8,9,13,26,37,39,41,50,52,58,59,80,103,104,105,109,136,190,191,240,241,290,292,319,320,344,],[17,17,17,17,-120,-7,-9,-11,-13,61,-12,-14,-24,-8,17,-123,141,-126,-15,-120,-120,-16,-10,-120,-120,-26,-25,]),'FLOAT':([5,8,9,13,26,37,39,41,50,52,58,59,80,103,104,105,109,136,190,191,240,241,290,292,319,320,344,],[18,18,18,18,-120,-7,-9,-11,-13,62,-12,-14,-24,-8,18,-123,142,-126,-15,-120,-120,-16,-10,-120,-120,-26,-25,]),'CHAR':([5,8,9,13,26,37,39,41,50,52,58,59,80,103,104,105,109,136,190,191,240,241,290,292,319,320,344,],[19,19,19,19,-120,-7,-9,-11,-13,63,-12,-14,-24,-8,19,-123,143,-126,-15,-120,-120,-16,-10,-120,-120,-26,-25,]),'BOOL':([5,8,9,13,26,37,39,41,50,52,58,59,80,103,104,105,109,136,190,191,240,241,290,292,319,320,344,],[20,20,20,20,-120,-7,-9,-11,-13,64,-12,-14,-24,-8,20,-123,144,-126,-15,-120,-120,-16,-10,-120,-120,-26,-25,]),'VOID':([5,8,9,13,26,37,39,41,50,58,59,80,103,104,105,136,190,191,240,241,290,292,319,320,344,],[21,21,21,21,-120,-7,-9,-11,-13,-12,-14,-24,-8,21,-123,-126,-15,-120,-120,-16,-10,-120,-120,-26,-25,]),'FUNCTION':([6,15,17,18,19,20,21,22,32,33,34,35,36,],[-120,30,-120,-120,-120,-120,-120,-31,-27,-28,-29,-30,-32,]),'VAR':([12,51,57,68,69,85,86,87,88,89,90,91,98,99,100,102,105,108,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,147,148,149,150,151,152,153,155,157,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,177,179,183,186,187,193,194,200,201,202,203,204,205,206,207,208,209,211,213,215,216,217,218,219,220,221,222,223,224,225,226,227,231,232,235,236,238,239,242,247,248,251,252,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,280,282,283,287,293,294,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,341,343,345,346,350,351,353,355,356,357,358,359,362,363,],[27,27,27,83,100,100,100,100,100,100,100,100,-120,-120,-120,134,-123,27,155,100,100,100,100,100,-72,-73,-60,-120,-63,100,100,100,27,27,-77,-133,-133,-120,-120,-120,-120,-120,-134,-120,-139,-138,-137,-136,-110,100,-113,100,-120,-127,-128,-129,-130,-131,-64,-67,-62,100,-86,100,83,100,100,-80,-81,-82,-83,100,-61,155,100,-120,100,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-142,100,-120,-85,100,100,-140,-140,-120,-53,-88,-133,-133,-91,-92,-133,-133,-133,-133,-133,-133,-99,-101,-133,-133,-104,-105,-133,-133,-108,-115,-116,-117,-118,-119,100,-68,100,-55,-120,-120,-135,-52,100,100,100,100,100,100,100,100,100,100,100,100,-120,-65,-120,-70,-120,100,-120,100,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,-54,100,-51,-109,-120,-120,-74,-76,-84,-120,100,-87,-120,-75,]),'L_PAR':([16,31,45,54,93,94,95,96,97,101,122,123,125,126,132,133,134,148,149,150,151,152,153,154,157,186,200,201,202,203,204,205,206,209,213,232,235,236,239,255,256,259,260,261,262,263,264,267,268,271,272,283,287,298,299,300,301,302,303,304,305,306,307,308,309,316,341,],[-121,46,-122,68,122,123,124,125,126,133,157,157,157,157,157,157,157,-133,-133,-120,-120,-120,-120,206,-134,157,157,157,-80,-81,-82,-83,157,157,157,-142,157,-120,157,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,157,-55,157,157,157,157,157,157,157,157,157,157,157,157,-120,-54,]),'LESS':([25,100,129,130,131,155,163,164,165,166,168,170,171,172,173,174,175,183,207,217,218,219,220,221,222,223,224,225,226,227,236,266,269,270,273,274,275,276,277,278,287,296,316,324,333,334,335,336,341,346,],[38,-120,-60,-120,-63,-120,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,259,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-102,-103,-106,-107,-54,-109,]),'L_BREAK':([27,100,134,155,],[44,132,132,132,]),'COMMA':([27,42,43,49,53,67,79,100,106,129,130,131,137,155,160,161,162,163,164,165,166,168,170,171,172,173,174,175,178,180,181,183,184,207,215,216,217,218,219,220,221,222,223,224,225,226,227,229,230,236,254,257,258,265,266,269,270,273,274,275,276,277,278,287,296,316,324,325,326,327,328,329,330,331,332,333,334,335,336,341,346,],[-123,-124,51,51,66,-120,-23,-120,-120,-60,-120,-63,-22,-120,213,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-141,-132,232,-62,235,-61,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,280,232,-120,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-54,-109,]),'COLON':([27,42,43,49,67,79,83,106,137,],[-123,-124,52,52,-120,-23,109,-120,-22,]),'INHERIT':([38,],[47,]),'L_CURPAR':([40,50,55,58,59,105,136,139,190,191,192,241,285,288,318,354,],[48,-13,69,-12,-14,-123,-126,193,-15,-120,242,-16,315,317,343,358,]),'CTE_INT':([44,66,122,123,125,126,132,133,134,148,149,150,151,152,153,157,167,169,186,200,201,202,203,204,205,206,209,213,232,235,236,239,255,256,259,260,261,262,263,264,267,268,271,272,283,287,298,299,300,301,302,303,304,305,306,307,308,309,316,341,],[53,78,172,172,172,172,172,172,172,-133,-133,-120,-120,-120,-120,-134,172,172,172,172,172,-80,-81,-82,-83,172,172,172,-142,172,-120,172,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,172,-55,172,172,172,172,172,172,172,172,172,172,172,172,-120,-54,]),'R_PAR':([46,68,81,100,122,129,130,131,155,158,160,161,162,163,164,165,166,168,170,171,172,173,174,175,176,178,180,181,182,183,185,194,207,212,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,236,244,245,246,249,250,253,254,257,258,265,266,269,270,273,274,275,276,277,278,287,296,316,324,325,326,327,328,329,330,331,332,333,334,335,336,341,346,],[55,82,107,-120,159,-60,-120,-63,-120,210,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-143,-141,-132,233,234,-62,237,-120,-61,-56,-58,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,279,281,233,-120,-33,-34,-35,295,296,-57,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-54,-109,]),'ATTRIBUTES':([48,],[57,]),'METHODS':([50,58,59,71,105,136,190,191,241,],[-13,-12,-14,104,-123,-126,-15,-120,-16,]),'R_BREAK':([53,78,100,129,130,131,155,161,162,163,164,165,166,168,170,171,172,173,174,175,183,184,207,215,216,217,218,219,220,221,222,223,224,225,226,227,236,254,257,258,265,266,269,270,273,274,275,276,277,278,286,287,296,316,324,325,326,327,328,329,330,331,332,333,334,335,336,341,346,],[67,106,-120,-60,-120,-63,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,236,-61,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,316,-55,-135,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-54,-109,]),'GREATER':([56,100,129,130,131,155,163,164,165,166,168,170,171,172,173,174,175,183,207,217,218,219,220,221,222,223,224,225,226,227,236,266,269,270,273,274,275,276,277,278,287,296,316,324,333,334,335,336,341,346,],[70,-120,-60,-120,-63,-120,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,260,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-102,-103,-106,-107,-54,-109,]),'RETURN':([69,85,86,87,88,89,90,91,98,99,100,127,128,129,130,131,147,155,161,162,163,164,165,166,168,170,171,172,173,174,175,177,179,183,187,193,207,211,215,216,217,218,219,220,221,222,223,224,225,226,227,231,236,238,242,247,248,251,252,254,257,258,265,266,269,270,273,274,275,276,277,278,282,287,293,294,296,297,310,311,312,313,314,315,316,317,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,341,343,345,346,350,351,353,355,356,357,358,359,362,363,],[94,94,94,94,94,94,94,94,-120,-120,-120,-72,-73,-60,-120,-63,-77,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-64,-67,-62,-86,94,-61,-120,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-120,-85,94,-140,-140,-120,-53,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-68,-55,-120,-120,-135,-52,-120,-65,-120,-70,-120,94,-120,94,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,-54,94,-51,-109,-120,-120,-74,-76,-84,-120,94,-87,-120,-75,]),'READ':([69,85,86,87,88,89,90,91,98,99,100,127,128,129,130,131,147,155,161,162,163,164,165,166,168,170,171,172,173,174,175,177,179,183,187,193,207,211,215,216,217,218,219,220,221,222,223,224,225,226,227,231,236,238,242,247,248,251,252,254,257,258,265,266,269,270,273,274,275,276,277,278,282,287,293,294,296,297,310,311,312,313,314,315,316,317,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,341,343,345,346,350,351,353,355,356,357,358,359,362,363,],[95,95,95,95,95,95,95,95,-120,-120,-120,-72,-73,-60,-120,-63,-77,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-64,-67,-62,-86,95,-61,-120,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-120,-85,95,-140,-140,-120,-53,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-68,-55,-120,-120,-135,-52,-120,-65,-120,-70,-120,95,-120,95,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,-54,95,-51,-109,-120,-120,-74,-76,-84,-120,95,-87,-120,-75,]),'WRITE':([69,85,86,87,88,89,90,91,98,99,100,127,128,129,130,131,147,155,161,162,163,164,165,166,168,170,171,172,173,174,175,177,179,183,187,193,207,211,215,216,217,218,219,220,221,222,223,224,225,226,227,231,236,238,242,247,248,251,252,254,257,258,265,266,269,270,273,274,275,276,277,278,282,287,293,294,296,297,310,311,312,313,314,315,316,317,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,341,343,345,346,350,351,353,355,356,357,358,359,362,363,],[96,96,96,96,96,96,96,96,-120,-120,-120,-72,-73,-60,-120,-63,-77,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-64,-67,-62,-86,96,-61,-120,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-120,-85,96,-140,-140,-120,-53,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-68,-55,-120,-120,-135,-52,-120,-65,-120,-70,-120,96,-120,96,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,-54,96,-51,-109,-120,-120,-74,-76,-84,-120,96,-87,-120,-75,]),'IF':([69,85,86,87,88,89,90,91,98,99,100,127,128,129,130,131,147,155,161,162,163,164,165,166,168,170,171,172,173,174,175,177,179,183,187,193,207,211,215,216,217,218,219,220,221,222,223,224,225,226,227,231,236,238,242,247,248,251,252,254,257,258,265,266,269,270,273,274,275,276,277,278,282,287,293,294,296,297,310,311,312,313,314,315,316,317,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,341,343,345,346,350,351,353,355,356,357,358,359,362,363,],[97,97,97,97,97,97,97,97,-120,-120,-120,-72,-73,-60,-120,-63,-77,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-64,-67,-62,-86,97,-61,-120,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-120,-85,97,-140,-140,-120,-53,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-68,-55,-120,-120,-135,-52,-120,-65,-120,-70,-120,97,-120,97,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,-54,97,-51,-109,-120,-120,-74,-76,-84,-120,97,-87,-120,-75,]),'WHILE':([69,85,86,87,88,89,90,91,98,99,100,127,128,129,130,131,147,155,161,162,163,164,165,166,168,170,171,172,173,174,175,177,179,183,187,193,207,211,215,216,217,218,219,220,221,222,223,224,225,226,227,231,236,238,242,247,248,251,252,254,257,258,265,266,269,270,273,274,275,276,277,278,282,287,293,294,296,297,310,311,312,313,314,315,316,317,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,341,343,345,346,350,351,353,355,356,357,358,359,362,363,],[101,101,101,101,101,101,101,101,-120,-120,-120,-72,-73,-60,-120,-63,-77,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-64,-67,-62,-86,101,-61,-120,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-120,-85,101,-140,-140,-120,-53,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-68,-55,-120,-120,-135,-52,-120,-65,-120,-70,-120,101,-120,101,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,-54,101,-51,-109,-120,-120,-74,-76,-84,-120,101,-87,-120,-75,]),'FROM':([69,85,86,87,88,89,90,91,98,99,100,127,128,129,130,131,147,155,161,162,163,164,165,166,168,170,171,172,173,174,175,177,179,183,187,193,207,211,215,216,217,218,219,220,221,222,223,224,225,226,227,231,236,238,242,247,248,251,252,254,257,258,265,266,269,270,273,274,275,276,277,278,282,287,293,294,296,297,310,311,312,313,314,315,316,317,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,341,343,345,346,350,351,353,355,356,357,358,359,362,363,],[102,102,102,102,102,102,102,102,-120,-120,-120,-72,-73,-60,-120,-63,-77,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-64,-67,-62,-86,102,-61,-120,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-120,-85,102,-140,-140,-120,-53,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-68,-55,-120,-120,-135,-52,-120,-65,-120,-70,-120,102,-120,102,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,-54,102,-51,-109,-120,-120,-74,-76,-84,-120,102,-87,-120,-75,]),'R_CURPAR':([80,84,85,86,87,88,89,90,91,98,99,100,111,112,113,114,115,116,117,118,119,127,128,129,130,131,135,147,155,161,162,163,164,165,166,168,170,171,172,173,174,175,177,179,183,187,207,211,215,216,217,218,219,220,221,222,223,224,225,226,227,231,236,238,243,247,248,251,252,254,257,258,265,266,269,270,273,274,275,276,277,278,282,287,291,292,293,294,296,297,310,311,312,313,314,316,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,341,344,345,346,347,348,350,351,352,353,355,356,357,359,361,362,363,],[-24,110,-120,-120,-120,-120,-120,-120,-120,-120,-120,-120,-42,-49,-50,-43,-44,-45,-46,-47,-48,-72,-73,-60,-120,-63,189,-77,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-64,-67,-62,-86,-61,-120,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-69,-120,-85,292,-140,-140,-120,-53,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-68,-55,319,-120,-120,-120,-135,-52,-120,-65,-120,-70,-120,-120,-120,-26,-78,-79,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-59,-66,-71,-54,-25,-51,-109,350,351,-120,-120,357,-74,-76,-84,-120,-87,362,-120,-75,]),'EQUAL':([92,100,120,129,130,131,155,183,207,236,287,316,341,],[-127,-120,148,-60,-120,-63,-120,-62,-61,-120,-55,-120,-54,]),'PLUS_EQ':([92,100,120,129,130,131,155,183,207,236,287,316,341,],[-127,-120,150,-60,-120,-63,-120,-62,-61,-120,-55,-120,-54,]),'MIN_EQ':([92,100,120,129,130,131,155,183,207,236,287,316,341,],[-127,-120,151,-60,-120,-63,-120,-62,-61,-120,-55,-120,-54,]),'MULT_EQ':([92,100,120,129,130,131,155,183,207,236,287,316,341,],[-127,-120,152,-60,-120,-63,-120,-62,-61,-120,-55,-120,-54,]),'DIV_EQ':([92,100,120,129,130,131,155,183,207,236,287,316,341,],[-127,-120,153,-60,-120,-63,-120,-62,-61,-120,-55,-120,-54,]),'DOT':([93,156,],[121,208,]),'MULT':([100,129,130,131,155,165,166,168,170,171,172,173,174,175,183,207,219,220,221,222,223,224,225,226,227,236,274,275,276,277,278,287,296,316,324,341,346,],[-120,-60,-120,-63,-120,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,271,-111,-112,-114,-120,-120,-120,-120,-120,-120,-115,-116,-117,-118,-119,-55,-135,-120,-120,-54,-109,]),'DIV':([100,129,130,131,155,165,166,168,170,171,172,173,174,175,183,207,219,220,221,222,223,224,225,226,227,236,274,275,276,277,278,287,296,316,324,341,346,],[-120,-60,-120,-63,-120,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,272,-111,-112,-114,-120,-120,-120,-120,-120,-120,-115,-116,-117,-118,-119,-55,-135,-120,-120,-54,-109,]),'PLUS':([100,122,123,125,126,129,130,131,132,133,134,148,149,150,151,152,153,155,157,164,165,166,168,170,171,172,173,174,175,183,186,200,201,202,203,204,205,206,207,209,213,218,219,220,221,222,223,224,225,226,227,232,235,236,239,255,256,259,260,261,262,263,264,267,268,270,271,272,273,274,275,276,277,278,283,287,296,298,299,300,301,302,303,304,305,306,307,308,309,316,324,335,336,341,346,],[-120,167,167,167,167,-60,-120,-63,167,167,167,-133,-133,-120,-120,-120,-120,-120,-134,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,167,167,167,-80,-81,-82,-83,167,-61,167,167,267,-120,-111,-112,-114,-120,-120,-120,-120,-120,-142,167,-120,167,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-105,-133,-133,-108,-115,-116,-117,-118,-119,167,-55,-135,167,167,167,167,167,167,167,167,167,167,167,167,-120,-120,-106,-107,-54,-109,]),'MINUS':([100,122,123,125,126,129,130,131,132,133,134,148,149,150,151,152,153,155,157,164,165,166,168,170,171,172,173,174,175,183,186,200,201,202,203,204,205,206,207,209,213,218,219,220,221,222,223,224,225,226,227,232,235,236,239,255,256,259,260,261,262,263,264,267,268,270,271,272,273,274,275,276,277,278,283,287,296,298,299,300,301,302,303,304,305,306,307,308,309,316,324,335,336,341,346,],[-120,169,169,169,169,-60,-120,-63,169,169,169,-133,-133,-120,-120,-120,-120,-120,-134,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,169,169,169,-80,-81,-82,-83,169,-61,169,169,268,-120,-111,-112,-114,-120,-120,-120,-120,-120,-142,169,-120,169,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-105,-133,-133,-108,-115,-116,-117,-118,-119,169,-55,-135,169,169,169,169,169,169,169,169,169,169,169,169,-120,-120,-106,-107,-54,-109,]),'LESS_TH':([100,129,130,131,155,163,164,165,166,168,170,171,172,173,174,175,183,207,217,218,219,220,221,222,223,224,225,226,227,236,266,269,270,273,274,275,276,277,278,287,296,316,324,333,334,335,336,341,346,],[-120,-60,-120,-63,-120,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,261,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-102,-103,-106,-107,-54,-109,]),'GREAT_TH':([100,129,130,131,155,163,164,165,166,168,170,171,172,173,174,175,183,207,217,218,219,220,221,222,223,224,225,226,227,236,266,269,270,273,274,275,276,277,278,287,296,316,324,333,334,335,336,341,346,],[-120,-60,-120,-63,-120,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,262,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-102,-103,-106,-107,-54,-109,]),'SAME':([100,129,130,131,155,163,164,165,166,168,170,171,172,173,174,175,183,207,217,218,219,220,221,222,223,224,225,226,227,236,266,269,270,273,274,275,276,277,278,287,296,316,324,333,334,335,336,341,346,],[-120,-60,-120,-63,-120,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,263,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-102,-103,-106,-107,-54,-109,]),'DIF':([100,129,130,131,155,163,164,165,166,168,170,171,172,173,174,175,183,207,217,218,219,220,221,222,223,224,225,226,227,236,266,269,270,273,274,275,276,277,278,287,296,316,324,333,334,335,336,341,346,],[-120,-60,-120,-63,-120,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,264,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-102,-103,-106,-107,-54,-109,]),'OR':([100,129,130,131,155,162,163,164,165,166,168,170,171,172,173,174,175,183,207,216,217,218,219,220,221,222,223,224,225,226,227,236,258,265,266,269,270,273,274,275,276,277,278,287,296,316,324,327,328,329,330,331,332,333,334,335,336,341,346,],[-120,-60,-120,-63,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,255,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-54,-109,]),'AND':([100,129,130,131,155,162,163,164,165,166,168,170,171,172,173,174,175,183,207,216,217,218,219,220,221,222,223,224,225,226,227,236,258,265,266,269,270,273,274,275,276,277,278,287,296,316,324,327,328,329,330,331,332,333,334,335,336,341,346,],[-120,-60,-120,-63,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,256,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-54,-109,]),'TO':([100,129,130,131,155,161,162,163,164,165,166,168,170,171,172,173,174,175,183,188,207,215,216,217,218,219,220,221,222,223,224,225,226,227,236,254,257,258,265,266,269,270,273,274,275,276,277,278,287,296,316,324,325,326,327,328,329,330,331,332,333,334,335,336,341,346,],[-120,-60,-120,-63,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,239,-61,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,-135,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-54,-109,]),'DO':([100,129,130,131,155,161,162,163,164,165,166,168,170,171,172,173,174,175,183,207,215,216,217,218,219,220,221,222,223,224,225,226,227,236,237,254,257,258,265,266,269,270,273,274,275,276,277,278,287,289,296,316,324,325,326,327,328,329,330,331,332,333,334,335,336,341,346,],[-120,-60,-120,-63,-120,-120,-139,-138,-137,-136,-110,-113,-120,-127,-128,-129,-130,-131,-62,-61,-100,-120,-120,-120,-120,-111,-112,-114,-120,-120,-120,-120,-120,-120,288,-88,-91,-92,-99,-101,-104,-105,-108,-115,-116,-117,-118,-119,-55,318,-135,-120,-120,-89,-90,-93,-94,-95,-96,-97,-98,-102,-103,-106,-107,-54,-109,]),'CTE_FLOAT':([122,123,125,126,132,133,134,148,149,150,151,152,153,157,167,169,186,200,201,202,203,204,205,206,209,213,232,235,236,239,255,256,259,260,261,262,263,264,267,268,271,272,283,287,298,299,300,301,302,303,304,305,306,307,308,309,316,341,],[173,173,173,173,173,173,173,-133,-133,-120,-120,-120,-120,-134,173,173,173,173,173,-80,-81,-82,-83,173,173,173,-142,173,-120,173,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,173,-55,173,173,173,173,173,173,173,173,173,173,173,173,-120,-54,]),'CTE_CHAR':([122,123,125,126,132,133,134,148,149,150,151,152,153,157,167,169,186,200,201,202,203,204,205,206,209,213,232,235,236,239,255,256,259,260,261,262,263,264,267,268,271,272,283,287,298,299,300,301,302,303,304,305,306,307,308,309,316,341,],[174,174,174,174,174,174,174,-133,-133,-120,-120,-120,-120,-134,174,174,174,174,174,-80,-81,-82,-83,174,174,174,-142,174,-120,174,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,174,-55,174,174,174,174,174,174,174,174,174,174,174,174,-120,-54,]),'CTE_BOOL':([122,123,125,126,132,133,134,148,149,150,151,152,153,157,167,169,186,200,201,202,203,204,205,206,209,213,232,235,236,239,255,256,259,260,261,262,263,264,267,268,271,272,283,287,298,299,300,301,302,303,304,305,306,307,308,309,316,341,],[175,175,175,175,175,175,175,-133,-133,-120,-120,-120,-120,-134,175,175,175,175,175,-80,-81,-82,-83,175,175,175,-142,175,-120,175,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,-133,175,-55,175,175,175,175,175,175,175,175,175,175,175,175,-120,-54,]),'CTE_STRING':([125,232,283,],[180,-142,180,]),'THEN':([234,],[285,]),'ELSE':([350,],[354,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'np_addFunc':([3,45,],[4,54,]),'programT':([5,8,],[7,23,]),'class':([5,8,],[8,8,]),'vars':([5,8,],[9,9,]),'programF':([5,8,9,13,],[10,10,24,28,]),'func':([5,8,9,13,104,],[13,13,13,13,135,]),'main':([5,8,9,13,],[14,14,14,14,]),'typeFunc':([5,8,9,13,104,],[15,15,15,15,15,]),'empty':([6,14,17,18,19,20,21,26,61,62,63,64,65,67,85,86,87,88,89,90,91,98,99,100,106,110,130,141,142,143,144,145,150,151,152,153,155,160,161,170,191,194,211,216,217,218,219,223,224,225,226,227,236,240,251,292,293,294,310,312,314,316,319,323,324,350,351,357,362,],[22,29,32,33,34,35,36,41,73,74,75,76,77,79,113,113,113,113,113,113,113,127,128,131,137,146,183,195,196,197,198,199,202,203,204,205,131,214,215,222,241,246,252,257,265,269,273,274,275,276,277,278,287,290,297,320,321,322,337,338,339,341,344,345,346,355,356,359,363,]),'dec':([12,51,57,108,136,138,],[26,59,71,139,190,192,]),'np_getMainFunc':([16,],[31,]),'classT':([25,],[37,]),'classF':([25,70,],[39,103,]),'arr':([27,],[42,]),'np_getDec':([27,105,],[43,136,]),'np_getDecArr':([42,],[49,]),'decF':([43,49,],[50,58,]),'type':([52,],[60,]),'np_getVarType':([60,],[72,]),'funcF':([68,],[80,]),'parameter':([68,194,],[81,245,]),'statement':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[84,112,112,112,112,112,112,112,243,291,340,342,349,360,]),'assigment':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'void':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'return':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'read':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'write':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'if':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'repeat':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'var':([69,85,86,87,88,89,90,91,122,123,124,125,126,132,133,134,167,169,186,193,200,201,206,209,213,235,239,242,280,283,298,299,300,301,302,303,304,305,306,307,308,309,315,317,343,358,],[92,92,92,92,92,92,92,92,171,171,178,171,171,171,171,171,171,171,171,92,171,171,171,171,171,171,171,92,178,171,171,171,171,171,171,171,171,171,171,171,171,171,92,92,92,92,]),'conditional':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'nonconditional':([69,85,86,87,88,89,90,91,193,242,315,317,343,358,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'statementF':([85,86,87,88,89,90,91,],[111,114,115,116,117,118,119,]),'np_addId':([92,171,],[120,223,]),'varF':([100,155,],[129,207,]),'arrfunc':([100,134,155,],[130,186,130,]),'typepar':([109,],[140,]),'assigmentF':([120,],[147,]),'ope':([120,],[149,]),'param':([122,206,213,],[158,249,253,]),'exp':([122,123,125,126,132,133,134,186,200,201,206,209,213,235,239,283,],[160,176,181,182,184,185,188,188,247,248,160,250,160,286,289,181,]),'bool':([122,123,125,126,132,133,134,186,200,201,206,209,213,235,239,283,298,299,],[161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,325,326,]),'logical':([122,123,125,126,132,133,134,186,200,201,206,209,213,235,239,283,298,299,300,301,302,303,304,305,],[162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,327,328,329,330,331,332,]),'ex':([122,123,125,126,132,133,134,186,200,201,206,209,213,235,239,283,298,299,300,301,302,303,304,305,306,307,],[163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,333,334,]),'term':([122,123,125,126,132,133,134,186,200,201,206,209,213,235,239,283,298,299,300,301,302,303,304,305,306,307,308,309,],[164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,335,336,]),'factor':([122,123,125,126,132,133,134,186,200,201,206,209,213,235,239,283,298,299,300,301,302,303,304,305,306,307,308,309,],[165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,]),'factorT':([122,123,125,126,132,133,134,186,200,201,206,209,213,235,239,283,298,299,300,301,302,303,304,305,306,307,308,309,],[166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,]),'factorF':([122,123,125,126,132,133,134,167,169,186,200,201,206,209,213,235,239,283,298,299,300,301,302,303,304,305,306,307,308,309,],[168,168,168,168,168,168,168,220,221,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,]),'varcte':([122,123,125,126,132,133,134,167,169,186,200,201,206,209,213,235,239,283,298,299,300,301,302,303,304,305,306,307,308,309,],[170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,]),'readF':([124,280,],[177,311,]),'writeT':([125,283,],[179,313,]),'nonconditionalF':([134,186,],[187,238,]),'np_addToDic':([136,],[191,]),'np_addOp':([148,149,255,256,259,260,261,262,263,264,267,268,271,272,],[200,201,298,299,300,301,302,303,304,305,306,307,308,309,]),'np_addPar':([157,],[209,]),'paramF':([160,],[212,]),'np_addBool':([162,],[216,]),'np_addLogical':([163,],[217,]),'np_addEx':([164,],[218,]),'np_addTerm':([165,],[219,]),'np_addConstInt':([172,],[224,]),'np_addConstFloat':([173,],[225,]),'np_addConstChar':([174,],[226,]),'np_addConstBool':([175,],[227,]),'np_addReturn':([176,],[228,]),'np_addRead':([178,],[229,]),'np_addConstString':([180,],[230,]),'writeF':([181,230,],[231,282,]),'parameterF':([194,],[244,]),'boolF':([216,],[254,]),'logicalF':([217,],[258,]),'exF':([218,],[266,]),'termF':([219,],[270,]),'np_addWrite':([232,233,],[283,284,]),'np_doAssign':([247,248,],[293,294,]),'np_popPar':([296,],[324,]),'ifF':([350,],[353,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID np_addFunc SEMICOLON programT','program',5,'p_program','Lex_Parser.py',637),
  ('programT -> class programT','programT',2,'p_programT','Lex_Parser.py',643),
  ('programT -> vars programF','programT',2,'p_programT','Lex_Parser.py',644),
  ('programT -> programF','programT',1,'p_programT','Lex_Parser.py',645),
  ('programF -> func programF','programF',2,'p_programT','Lex_Parser.py',647),
  ('programF -> main empty','programF',2,'p_programT','Lex_Parser.py',648),
  ('class -> CLASS ID classT','class',3,'p_class','Lex_Parser.py',654),
  ('classT -> LESS INHERIT ID GREATER classF','classT',5,'p_classT','Lex_Parser.py',661),
  ('classT -> classF','classT',1,'p_classT','Lex_Parser.py',662),
  ('classF -> SEMICOLON L_CURPAR ATTRIBUTES dec METHODS func R_CURPAR SEMICOLON empty','classF',9,'p_classT','Lex_Parser.py',664),
  ('vars -> VARS dec empty','vars',3,'p_vars','Lex_Parser.py',670),
  ('dec -> VAR arr np_getDecArr decF','dec',4,'p_dec','Lex_Parser.py',676),
  ('dec -> VAR np_getDec decF','dec',3,'p_dec','Lex_Parser.py',677),
  ('decF -> COMMA dec','decF',2,'p_decF','Lex_Parser.py',686),
  ('decF -> COLON type np_getVarType SEMICOLON np_getDec dec','decF',6,'p_decF','Lex_Parser.py',687),
  ('decF -> COLON type np_getVarType SEMICOLON np_getDec np_addToDic empty','decF',7,'p_decF','Lex_Parser.py',688),
  ('type -> INT empty','type',2,'p_type','Lex_Parser.py',695),
  ('type -> FLOAT empty','type',2,'p_type','Lex_Parser.py',696),
  ('type -> CHAR empty','type',2,'p_type','Lex_Parser.py',697),
  ('type -> BOOL empty','type',2,'p_type','Lex_Parser.py',698),
  ('type -> ID empty','type',2,'p_type','Lex_Parser.py',699),
  ('arr -> L_BREAK CTE_INT COMMA CTE_INT R_BREAK empty','arr',6,'p_arr','Lex_Parser.py',705),
  ('arr -> L_BREAK CTE_INT R_BREAK empty','arr',4,'p_arr','Lex_Parser.py',706),
  ('func -> typeFunc FUNCTION ID np_addFunc L_PAR funcF','func',6,'p_func','Lex_Parser.py',715),
  ('funcF -> parameter R_PAR SEMICOLON dec L_CURPAR statement R_CURPAR empty','funcF',8,'p_funcF','Lex_Parser.py',721),
  ('funcF -> R_PAR SEMICOLON dec L_CURPAR statement R_CURPAR empty','funcF',7,'p_funcF','Lex_Parser.py',722),
  ('typeFunc -> INT empty','typeFunc',2,'p_typeFunc','Lex_Parser.py',727),
  ('typeFunc -> FLOAT empty','typeFunc',2,'p_typeFunc','Lex_Parser.py',728),
  ('typeFunc -> CHAR empty','typeFunc',2,'p_typeFunc','Lex_Parser.py',729),
  ('typeFunc -> BOOL empty','typeFunc',2,'p_typeFunc','Lex_Parser.py',730),
  ('typeFunc -> ID empty','typeFunc',2,'p_typeFunc','Lex_Parser.py',731),
  ('typeFunc -> VOID empty','typeFunc',2,'p_typeFunc','Lex_Parser.py',732),
  ('parameter -> VAR COLON typepar SEMICOLON parameterF','parameter',5,'p_paramater','Lex_Parser.py',739),
  ('parameterF -> parameter','parameterF',1,'p_paramater','Lex_Parser.py',741),
  ('parameterF -> empty','parameterF',1,'p_paramater','Lex_Parser.py',742),
  ('typepar -> INT empty','typepar',2,'p_typepar','Lex_Parser.py',748),
  ('typepar -> FLOAT empty','typepar',2,'p_typepar','Lex_Parser.py',749),
  ('typepar -> CHAR empty','typepar',2,'p_typepar','Lex_Parser.py',750),
  ('typepar -> BOOL empty','typepar',2,'p_typepar','Lex_Parser.py',751),
  ('typepar -> ID empty','typepar',2,'p_typepar','Lex_Parser.py',752),
  ('main -> MAIN np_getMainFunc L_PAR R_PAR L_CURPAR statement R_CURPAR empty','main',8,'p_main','Lex_Parser.py',758),
  ('statement -> assigment statementF','statement',2,'p_statement','Lex_Parser.py',764),
  ('statement -> void statementF','statement',2,'p_statement','Lex_Parser.py',765),
  ('statement -> return statementF','statement',2,'p_statement','Lex_Parser.py',766),
  ('statement -> read statementF','statement',2,'p_statement','Lex_Parser.py',767),
  ('statement -> write statementF','statement',2,'p_statement','Lex_Parser.py',768),
  ('statement -> if statementF','statement',2,'p_statement','Lex_Parser.py',769),
  ('statement -> repeat statementF','statement',2,'p_statement','Lex_Parser.py',770),
  ('statementF -> statement','statementF',1,'p_statement','Lex_Parser.py',772),
  ('statementF -> empty','statementF',1,'p_statement','Lex_Parser.py',773),
  ('void -> ID DOT ID L_PAR param R_PAR SEMICOLON empty','void',8,'p_void','Lex_Parser.py',779),
  ('void -> ID L_PAR param R_PAR SEMICOLON empty','void',6,'p_void','Lex_Parser.py',780),
  ('void -> ID L_PAR R_PAR SEMICOLON empty','void',5,'p_void','Lex_Parser.py',781),
  ('arrfunc -> L_BREAK exp COMMA exp R_BREAK empty','arrfunc',6,'p_arrfunc','Lex_Parser.py',787),
  ('arrfunc -> L_BREAK exp R_BREAK empty','arrfunc',4,'p_arrfunc','Lex_Parser.py',788),
  ('param -> exp paramF','param',2,'p_param','Lex_Parser.py',794),
  ('paramF -> COMMA param','paramF',2,'p_param','Lex_Parser.py',796),
  ('paramF -> empty','paramF',1,'p_param','Lex_Parser.py',797),
  ('return -> RETURN L_PAR exp np_addReturn R_PAR SEMICOLON empty','return',7,'p_return','Lex_Parser.py',803),
  ('var -> VAR varF','var',2,'p_var','Lex_Parser.py',809),
  ('var -> ID DOT VAR varF','var',4,'p_var','Lex_Parser.py',810),
  ('varF -> arrfunc empty','varF',2,'p_varF','Lex_Parser.py',817),
  ('varF -> empty','varF',1,'p_varF','Lex_Parser.py',818),
  ('read -> READ L_PAR readF','read',3,'p_read','Lex_Parser.py',823),
  ('readF -> var np_addRead COMMA readF','readF',4,'p_read','Lex_Parser.py',825),
  ('readF -> var np_addRead R_PAR SEMICOLON empty','readF',5,'p_read','Lex_Parser.py',826),
  ('write -> WRITE L_PAR writeT','write',3,'p_write','Lex_Parser.py',832),
  ('writeT -> CTE_STRING np_addConstString writeF','writeT',3,'p_write','Lex_Parser.py',834),
  ('writeT -> exp writeF','writeT',2,'p_write','Lex_Parser.py',835),
  ('writeF -> COMMA np_addWrite writeT','writeF',3,'p_write','Lex_Parser.py',837),
  ('writeF -> R_PAR np_addWrite SEMICOLON empty','writeF',4,'p_write','Lex_Parser.py',838),
  ('repeat -> conditional empty','repeat',2,'p_repeat','Lex_Parser.py',844),
  ('repeat -> nonconditional empty','repeat',2,'p_repeat','Lex_Parser.py',845),
  ('if -> IF L_PAR exp R_PAR THEN L_CURPAR statement SEMICOLON R_CURPAR ifF','if',10,'p_if','Lex_Parser.py',851),
  ('ifF -> ELSE L_CURPAR statement SEMICOLON R_CURPAR empty','ifF',6,'p_if','Lex_Parser.py',853),
  ('ifF -> empty','ifF',1,'p_if','Lex_Parser.py',854),
  ('assigment -> var np_addId assigmentF','assigment',3,'p_assigment','Lex_Parser.py',860),
  ('assigmentF -> EQUAL np_addOp exp np_doAssign empty','assigmentF',5,'p_assigment','Lex_Parser.py',862),
  ('assigmentF -> ope np_addOp exp np_doAssign empty','assigmentF',5,'p_assigment','Lex_Parser.py',863),
  ('ope -> PLUS_EQ empty','ope',2,'p_ope','Lex_Parser.py',869),
  ('ope -> MIN_EQ empty','ope',2,'p_ope','Lex_Parser.py',870),
  ('ope -> MULT_EQ empty','ope',2,'p_ope','Lex_Parser.py',871),
  ('ope -> DIV_EQ empty','ope',2,'p_ope','Lex_Parser.py',872),
  ('conditional -> WHILE L_PAR exp R_PAR DO L_CURPAR statement SEMICOLON R_CURPAR empty','conditional',10,'p_conditional','Lex_Parser.py',878),
  ('nonconditional -> FROM VAR arrfunc nonconditionalF','nonconditional',4,'p_nonconditional','Lex_Parser.py',884),
  ('nonconditional -> FROM VAR nonconditionalF','nonconditional',3,'p_nonconditional','Lex_Parser.py',885),
  ('nonconditionalF -> exp TO exp DO L_CURPAR statement SEMICOLON R_CURPAR empty','nonconditionalF',9,'p_nonconditional','Lex_Parser.py',887),
  ('bool -> logical np_addBool boolF','bool',3,'p_bool','Lex_Parser.py',893),
  ('boolF -> OR np_addOp bool','boolF',3,'p_bool','Lex_Parser.py',895),
  ('boolF -> AND np_addOp bool','boolF',3,'p_bool','Lex_Parser.py',896),
  ('boolF -> empty','boolF',1,'p_bool','Lex_Parser.py',897),
  ('logical -> ex np_addLogical logicalF','logical',3,'p_logical','Lex_Parser.py',903),
  ('logicalF -> LESS np_addOp logical','logicalF',3,'p_logical','Lex_Parser.py',905),
  ('logicalF -> GREATER np_addOp logical','logicalF',3,'p_logical','Lex_Parser.py',906),
  ('logicalF -> LESS_TH np_addOp logical','logicalF',3,'p_logical','Lex_Parser.py',907),
  ('logicalF -> GREAT_TH np_addOp logical','logicalF',3,'p_logical','Lex_Parser.py',908),
  ('logicalF -> SAME np_addOp logical','logicalF',3,'p_logical','Lex_Parser.py',909),
  ('logicalF -> DIF np_addOp logical','logicalF',3,'p_logical','Lex_Parser.py',910),
  ('logicalF -> empty','logicalF',1,'p_logical','Lex_Parser.py',911),
  ('exp -> bool empty','exp',2,'p_exp','Lex_Parser.py',917),
  ('ex -> term np_addEx exF','ex',3,'p_ex','Lex_Parser.py',925),
  ('exF -> PLUS np_addOp ex','exF',3,'p_ex','Lex_Parser.py',927),
  ('exF -> MINUS np_addOp ex','exF',3,'p_ex','Lex_Parser.py',928),
  ('exF -> empty','exF',1,'p_ex','Lex_Parser.py',929),
  ('term -> factor np_addTerm termF','term',3,'p_term','Lex_Parser.py',935),
  ('termF -> MULT np_addOp term','termF',3,'p_term','Lex_Parser.py',937),
  ('termF -> DIV np_addOp term','termF',3,'p_term','Lex_Parser.py',938),
  ('termF -> empty','termF',1,'p_term','Lex_Parser.py',939),
  ('factor -> L_PAR np_addPar exp R_PAR np_popPar empty','factor',6,'p_factor','Lex_Parser.py',945),
  ('factor -> factorT','factor',1,'p_factor','Lex_Parser.py',946),
  ('factorT -> PLUS factorF','factorT',2,'p_factor','Lex_Parser.py',948),
  ('factorT -> MINUS factorF','factorT',2,'p_factor','Lex_Parser.py',949),
  ('factorT -> factorF','factorT',1,'p_factor','Lex_Parser.py',950),
  ('factorF -> varcte empty','factorF',2,'p_factor','Lex_Parser.py',952),
  ('varcte -> var np_addId empty','varcte',3,'p_varcte','Lex_Parser.py',958),
  ('varcte -> CTE_INT np_addConstInt empty','varcte',3,'p_varcte','Lex_Parser.py',959),
  ('varcte -> CTE_FLOAT np_addConstFloat empty','varcte',3,'p_varcte','Lex_Parser.py',960),
  ('varcte -> CTE_CHAR np_addConstChar empty','varcte',3,'p_varcte','Lex_Parser.py',961),
  ('varcte -> CTE_BOOL np_addConstBool empty','varcte',3,'p_varcte','Lex_Parser.py',962),
  ('empty -> <empty>','empty',0,'p_empty','Lex_Parser.py',977),
  ('np_getMainFunc -> <empty>','np_getMainFunc',0,'p_np_getMainFunc','Lex_Parser.py',985),
  ('np_addFunc -> <empty>','np_addFunc',0,'p_np_addFunc','Lex_Parser.py',991),
  ('np_getDec -> <empty>','np_getDec',0,'p_np_getDec','Lex_Parser.py',1004),
  ('np_getDecArr -> <empty>','np_getDecArr',0,'p_np_getDecArr','Lex_Parser.py',1009),
  ('np_getVarType -> <empty>','np_getVarType',0,'p_np_getVarType','Lex_Parser.py',1014),
  ('np_addToDic -> <empty>','np_addToDic',0,'p_np_addToDic','Lex_Parser.py',1019),
  ('np_addId -> <empty>','np_addId',0,'p_np_addId','Lex_Parser.py',1143),
  ('np_addConstInt -> <empty>','np_addConstInt',0,'p_np_addConstInt','Lex_Parser.py',1149),
  ('np_addConstFloat -> <empty>','np_addConstFloat',0,'p_np_addConstFloat','Lex_Parser.py',1162),
  ('np_addConstChar -> <empty>','np_addConstChar',0,'p_np_addConstChar','Lex_Parser.py',1175),
  ('np_addConstBool -> <empty>','np_addConstBool',0,'p_np_addConstBool','Lex_Parser.py',1188),
  ('np_addConstString -> <empty>','np_addConstString',0,'p_np_addConstString','Lex_Parser.py',1201),
  ('np_addOp -> <empty>','np_addOp',0,'p_np_addOp','Lex_Parser.py',1223),
  ('np_addPar -> <empty>','np_addPar',0,'p_np_addPar','Lex_Parser.py',1228),
  ('np_popPar -> <empty>','np_popPar',0,'p_np_popPar','Lex_Parser.py',1233),
  ('np_addTerm -> <empty>','np_addTerm',0,'p_np_addTerm','Lex_Parser.py',1241),
  ('np_addEx -> <empty>','np_addEx',0,'p_np_addEx','Lex_Parser.py',1246),
  ('np_addLogical -> <empty>','np_addLogical',0,'p_np_addLogical','Lex_Parser.py',1251),
  ('np_addBool -> <empty>','np_addBool',0,'p_np_addBool','Lex_Parser.py',1256),
  ('np_doAssign -> <empty>','np_doAssign',0,'p_np_doAssign','Lex_Parser.py',1261),
  ('np_addRead -> <empty>','np_addRead',0,'p_np_addRead','Lex_Parser.py',1275),
  ('np_addWrite -> <empty>','np_addWrite',0,'p_np_addWrite','Lex_Parser.py',1283),
  ('np_addReturn -> <empty>','np_addReturn',0,'p_np_addReturn','Lex_Parser.py',1291),
]
